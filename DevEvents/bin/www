#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('devevents:server');
const fs = require('fs');
const https = require('https');

const portNumber = '3000';

const options = {
  key: fs.readFileSync('/etc/ssl/private/dev-events_space.key', 'utf8'),
  cert: fs.readFileSync('/etc/ssl/certs/ssl-bundle.crt', 'utf8')
};

const port = normalizePort(process.env.PORT || portNumber);
app.set('port', port);

const httpsServer = https.createServer(options, app).listen(port);

httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
